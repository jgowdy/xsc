#!/bin/bash
# XSC Smart APT Wrapper - Automatically manages CFI JIT allowlist
#
# Usage: xsc-apt install <package>
#        xsc-apt remove <package>
#        xsc-apt upgrade
#
# This wrapper intercepts package operations and:
# 1. Checks if package contains JIT engine (consults xsc-jit-packages.db)
# 2. Automatically adds/removes CFI allowlist entries
# 3. Regenerates initramfs if needed
# 4. Delegates to real apt for package management

set -e

# Paths
JIT_DB="/usr/share/xsc/jit-packages.db"
CFI_ALLOWLIST="/etc/cfi/allowlist"
CFI_ADD="/usr/sbin/cfi-allowlist-add"
CFI_REMOVE="/usr/sbin/cfi-allowlist-remove"

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[XSC]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[XSC]${NC} $1"
}

log_error() {
    echo -e "${RED}[XSC]${NC} $1"
}

# Check if package is a known JIT
is_jit_package() {
    local pkg=$1
    if [ ! -f "$JIT_DB" ]; then
        return 1
    fi
    grep -q "^${pkg}:" "$JIT_DB" 2>/dev/null
}

# Get JIT binary path for package
get_jit_binary() {
    local pkg=$1
    if [ ! -f "$JIT_DB" ]; then
        return 1
    fi
    grep "^${pkg}:" "$JIT_DB" 2>/dev/null | cut -d: -f2
}

# Get JIT reason for package
get_jit_reason() {
    local pkg=$1
    if [ ! -f "$JIT_DB" ]; then
        return 1
    fi
    grep "^${pkg}:" "$JIT_DB" 2>/dev/null | cut -d: -f3-
}

# Add JIT to CFI allowlist
add_jit_to_allowlist() {
    local pkg=$1
    local binary=$(get_jit_binary "$pkg")
    local reason=$(get_jit_reason "$pkg")

    if [ -z "$binary" ]; then
        log_warn "Package $pkg is in JIT database but binary path not found"
        return 1
    fi

    log_info "Package '$pkg' contains JIT engine: $binary"
    log_warn "Reason: $reason"
    log_info "Adding to CFI allowlist (CFI will be DISABLED for this JIT)"

    if [ -x "$CFI_ADD" ]; then
        "$CFI_ADD" "$binary" || true
        log_info "Added $binary to CFI allowlist"
        return 0
    else
        log_warn "cfi-allowlist-add not found, manual configuration needed"
        return 1
    fi
}

# Remove JIT from CFI allowlist
remove_jit_from_allowlist() {
    local pkg=$1
    local binary=$(get_jit_binary "$pkg")

    if [ -z "$binary" ]; then
        return 1
    fi

    log_info "Removing $binary from CFI allowlist"

    if [ -x "$CFI_REMOVE" ]; then
        "$CFI_REMOVE" "$binary" || true
        log_info "Removed $binary from CFI allowlist"
        return 0
    else
        log_warn "cfi-allowlist-remove not found"
        return 1
    fi
}

# Pre-process packages before apt operation
pre_process_packages() {
    local operation=$1
    shift
    local packages=("$@")
    local jit_found=false

    for pkg in "${packages[@]}"; do
        # Skip apt options
        if [[ "$pkg" =~ ^- ]]; then
            continue
        fi

        if is_jit_package "$pkg"; then
            jit_found=true
            case "$operation" in
                install|upgrade)
                    echo ""
                    log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    log_warn "CFI JIT ALLOWLIST WARNING"
                    log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    log_warn "Package: $pkg"
                    log_warn "Binary: $(get_jit_binary "$pkg")"
                    log_warn "Reason: $(get_jit_reason "$pkg")"
                    echo ""
                    log_warn "This package will be added to CFI allowlist."
                    log_warn "The JIT engine will run with CFI DISABLED."
                    log_warn "This is necessary because JIT engines cannot"
                    log_warn "easily comply with hardware CFI (CET/PAC)."
                    echo ""
                    log_info "All other processes will have FULL CFI enforcement."
                    log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    echo ""
                    ;;
            esac
        fi
    done

    return 0
}

# Post-process packages after apt operation
post_process_packages() {
    local operation=$1
    shift
    local packages=("$@")
    local allowlist_changed=false

    for pkg in "${packages[@]}"; do
        # Skip apt options
        if [[ "$pkg" =~ ^- ]]; then
            continue
        fi

        if is_jit_package "$pkg"; then
            case "$operation" in
                install|upgrade)
                    if add_jit_to_allowlist "$pkg"; then
                        allowlist_changed=true
                    fi
                    ;;
                remove|purge)
                    if remove_jit_from_allowlist "$pkg"; then
                        allowlist_changed=true
                    fi
                    ;;
            esac
        fi
    done

    if [ "$allowlist_changed" = true ]; then
        echo ""
        log_warn "CFI allowlist was modified."
        log_warn "Changes will take effect after:"
        log_warn "  1. Regenerating initramfs: update-initramfs -u"
        log_warn "  2. Rebooting the system"
        echo ""

        # Auto-regenerate initramfs if possible
        if [ -x /usr/sbin/update-initramfs ]; then
            log_info "Automatically regenerating initramfs..."
            /usr/sbin/update-initramfs -u || log_error "Failed to regenerate initramfs"
            echo ""
            log_warn "REBOOT REQUIRED for CFI allowlist changes to take effect"
            echo ""
        fi
    fi
}

# Main wrapper logic
main() {
    if [ $# -eq 0 ]; then
        echo "Usage: xsc-apt <apt-command> [packages...]"
        echo ""
        echo "This wrapper automatically manages CFI JIT allowlist"
        echo "when installing packages with JIT engines."
        echo ""
        echo "Examples:"
        echo "  xsc-apt install nodejs      # Auto-adds node to CFI allowlist"
        echo "  xsc-apt install openjdk-17-jdk  # Auto-adds java to CFI allowlist"
        echo "  xsc-apt remove nodejs       # Auto-removes node from CFI allowlist"
        exit 1
    fi

    local operation=$1
    shift

    # Pre-process (show warnings)
    pre_process_packages "$operation" "$@"

    # Run actual apt command
    log_info "Executing: apt $operation $@"
    apt "$operation" "$@"
    local apt_exit=$?

    # Post-process (modify allowlist) only if apt succeeded
    if [ $apt_exit -eq 0 ]; then
        post_process_packages "$operation" "$@"
    else
        log_error "apt command failed with exit code $apt_exit"
        exit $apt_exit
    fi
}

main "$@"
